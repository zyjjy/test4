#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define lines 100  // 定义最大行数为100
#define len 50     // 定义每个单词的最大长度为50

// 统计单词出现次数的函数
void countWords(char *input[], int numLines, char *end) {
    char words[lines][len];  // 存储单词的二维数组
    int counts[lines] = {0}; // 存储每个单词出现次数的数组
    for (int i = 0; i < numLines; i++) {
        char *line = input[i];  // 读取每一行
        if (strcmp(line, end) == 0) // 如果行内容为end，结束循环
            break;
        char *word = strtok(line, " "); // 按空格分割单词
        while (word != NULL) {
            int found = 0;
            for (int j = 0; j < lines; j++) {
                if (strcmp(words[j], word) == 0) {
                    counts[j]++; // 如果单词已存在，计数+1
                    found = 1;
                    break;
                }
                if (words[j][0] == '\0') { // 如果单词未出现过，记录新单词
                    strcpy(words[j], word);
                    counts[j]++;
                    found = 1;
                    break;
                }
            }
            word = strtok(NULL, " "); // 获取下一个单词
        }
    }
    // 输出统计结果
    printf("Word\t\tTotal Count\tCount Per Line\n");
    for (int i = 0; i < lines && words[i][0] != '\0'; i++) {
        printf("%s\t\t%d\t\t", words[i], counts[i]);
        for (int j = 0; j < numLines; j++) {
            if (input[j] != NULL && strstr(input[j], words[i]) != NULL) {
                int word_count = 0;
                char *temp = input[j];
                while ((temp = strstr(temp, words[i])) != NULL) {
                    word_count++;
                    temp += strlen(words[i]);
                }
                printf("%d ", word_count);
            } else {
                printf("0 "); 
            }
        }
        printf("\n");
    }
}

int main() {
    char *input[lines];  // 存储输入行的数组
    char line[100];      // 存储每行输入的字符数组
    int numLines = 0;    // 输入行数计数
    while (1) {
        fgets(line, sizeof(line), stdin); // 从标准输入读取一行
        line[strcspn(line, "\n")] = '\0'; // 去除行末换行符
        input[numLines] = malloc(strlen(line) + 1); // 为新行分配内存
        strcpy(input[numLines], line); // 将输入行内容复制到内存中
        if (strcmp(line, "END") == 0) // 如果输入为END，结束输入
            break;
        numLines++;
    }
    countWords(input, numLines, "END"); // 调用统计函数
    for (int i = 0; i < numLines; i++) {
        free(input[i]); // 释放分配的内存
    }
    return 0;
}
